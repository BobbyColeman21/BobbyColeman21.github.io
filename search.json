[
  {
    "objectID": "posts/working-with-graphs/index.html",
    "href": "posts/working-with-graphs/index.html",
    "title": "Making An Effective Graph",
    "section": "",
    "text": "During class this week, we learned how to create bar charts and discussed what makes a graph an effective tool to communicate data.\nTo do this, I made a bar chart showing UNL’s top 10 majors by students in 2024.\nFirst, I loaded the libraries I needed and started with a dataset of all UNL majors.\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidycensus)\n\nWarning: package 'tidycensus' was built under R version 4.3.3\n\nlibrary(janitor)\n\nWarning: package 'janitor' was built under R version 4.3.3\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\n\nmajors24 &lt;- read_csv(\"https://mattwaite.github.io/datajournalismfiles/enrollment2024.csv\") |&gt; clean_names()\n\nRows: 381 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): College, Major Name, Specialization\nnum (1): Headcount\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter loading the data and cleaning up the columns with clean_names(), I had to prepare the data for our chart. By filtering out any rows I didn’t need and sorting all specializations into their respective majors, I was left with the two rows I needed for the bar chart.\n\ntopmajors24 &lt;- majors24 |&gt; \n  filter(major_name != \"Total\") |&gt; \n  group_by(major_name) |&gt; \n  summarize(\n    total_majors = sum(headcount)\n  ) |&gt; \n  ungroup() |&gt; \n  top_n(10, wt=total_majors)\n\nI threw all the code into ggplot and made a decent graph.\n\nggplot() + \n  geom_bar(data = topmajors24, aes(x=reorder(major_name, total_majors), weight = total_majors)) +\n  coord_flip()\n\n\n\n\n\n\n\n\nIn the end, the chart was weak. It doesn’t tell an interesting story or communicate an insight. A better graph would compare the top 10 majors by students between several years or show us the majors with the lowest student counts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Latest Posts",
    "section": "",
    "text": "Making An Effective Graph\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 7, 2025\n\n\nBobby Coleman\n\n\n\n\n\n\nNo matching items"
  }
]